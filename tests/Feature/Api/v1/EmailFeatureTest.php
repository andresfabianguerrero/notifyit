<?php

namespace Tests\Feature\Api\v1;

use App\Http\Middleware\CredentialsApiKey;
use App\Jobs\SendEmailJob;
use App\Mail\DynamicEmail;
use App\Models\Credential;
use App\Models\EmailNotificationLog;
use App\Models\EmailNotificationSetting;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

class EmailFeatureTest extends TestCase
{
    /** @var Credential $credential */
    private $credential = null;

    private $headers = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->credential = factory(Credential::class)->create();
        factory(EmailNotificationSetting::class)->create([
            'credential_id' => $this->credential->id
        ]);
        $this->headers = [
            CredentialsApiKey::AUTH_HEADER => $this->credential->api_key
        ];
        Mail::fake();
    }

    private function validEmail()
    {
        return [
            'name' => 'Test Sender',
            'from' => 'test@sender.com',
            'reply_to' => 'alternative@sender.com',

            'to' => json_encode(['one@reciever.com']),
            'cc' => json_encode(['copyone@reciever.com', 'copytwo@reciever.com']),
            'bcc' => json_encode(['bccopyone@reciever.com']),

            'subject' => 'Email Subject',

            'body' => file_get_contents(__DIR__ . '/fixtures/email.html'),
            'alt_body' => $this->faker->paragraph(),

            'embedded' => json_encode([
                [
                    'name' => 'test_image',
                    'format' => 'png',
                    'b64' => base64_encode(
                        file_get_contents(__DIR__ . '/fixtures/test_image.png')
                    )
                ],
            ]),
            'attachments' => json_encode([
                [
                    'name' => 'test_attachment',
                    'format' => 'txt',
                    'b64' => base64_encode($this->faker->paragraph())
                ],
            ]),
        ];
    }

    public function test_it_can_list_latest_emails_statuses()
    {
        factory(EmailNotificationLog::class, 10)->create([
            'credential_id' => $this->credential->id
        ]);
        $response = $this->get(route('api.emails'), $this->headers);
        $response->assertStatus(200);
        $response->assertJsonCount(10, 'data');
    }

    public function test_it_can_list_an_email_status()
    {
        /** @var EmailNotificationLog $notification */
        $notification = factory(EmailNotificationLog::class)->create([
            'credential_id' => $this->credential->id
        ]);
        $response = $this->get(route('api.emails.status', ['uuid' => $notification->id]), $this->headers);
        $response->assertStatus(200);
        $response->assertJson([
            'mail_uuid' => $notification->id,
            'status' => $notification->status
        ]);
    }

    public function test_it_trows_404_on_unknown_id()
    {
        $response = $this->get(route('api.emails.status', ['uuid' => 'non-existing_UUID']), $this->headers);
        $response->assertStatus(404);
    }

    public function test_it_trows_403_if_an_invalid_or_no_api_key_is_specified()
    {
        $response = $this->get(route('api.emails'));
        $response->assertStatus(403);
    }

    public function test_it_cant_send_an_email_without_name()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'name');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_email_without_from()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'from');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_email_without_any_email_address()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'to');
        Arr::forget($email, 'cc');
        Arr::forget($email, 'bcc');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_email_without_any_valid_email_address()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'to');
        Arr::forget($email, 'cc');
        Arr::forget($email, 'bcc');
        $email['to'] = json_encode(['one_invalid_address@']);
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_email_without_subject()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'subject');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_email_without_body()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'body');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertNothingSent();
        $response->assertStatus(422);
    }

    public function test_it_can_queue_an_email()
    {
        $email = $this->validEmail();
        Queue::fake();
        $response = $this->post(route('api.emails.queue'), $email, $this->headers);
        Queue::assertPushed(SendEmailJob::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'queued');
    }

    public function test_it_can_send_an_email()
    {
        $email = $this->validEmail();
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertSent(DynamicEmail::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }

    public function test_it_can_send_an_email_without_reply_to()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'reply_to');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertSent(DynamicEmail::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }

    public function test_it_can_send_an_email_without_alt_body()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'alt_body');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertSent(DynamicEmail::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }

    public function test_it_can_send_an_email_without_embedded()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'embedded');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertSent(DynamicEmail::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }

    public function test_it_can_send_an_email_without_attachments()
    {
        $email = $this->validEmail();
        Arr::forget($email, 'attachments');
        $response = $this->post(route('api.emails.now'), $email, $this->headers);
        Mail::assertSent(DynamicEmail::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }
}
