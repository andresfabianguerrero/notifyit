<?php

namespace Tests\Feature\Api\v1;

use App\Components\Sms\Facades\Sms;
use App\Http\Middleware\CredentialsApiKey;
use App\Jobs\SendSmsJob;
use App\Models\Credential;
use App\Models\SmsNotificationLog;
use App\Models\SmsNotificationSetting;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

class SmsFeatureTest extends TestCase
{
    /** @var Credential $credential */
    private $credential = null;

    private $headers = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->credential = factory(Credential::class)->create();
        factory(SmsNotificationSetting::class)->create([
            'credential_id' => $this->credential->id
        ]);
        $this->headers = [
            CredentialsApiKey::AUTH_HEADER => $this->credential->api_key
        ];
    }

    private function validSms()
    {
        return [
            'to' => json_encode(['0987223658']),
            'text' => 'ESTO ES UN MENSAJE PARA COMPROBAR EL CAMBIO DE ECLIPSOFT  App2',
        ];
    }

    public function test_it_can_list_latest_sms_statuses()
    {
        factory(SmsNotificationLog::class, 10)->create([
            'credential_id' => $this->credential->id
        ]);
        $response = $this->get(route('api.sms'), $this->headers);
        $response->assertStatus(200);
        $response->assertJsonCount(10, 'data');
    }

    public function test_it_can_list_an_sms_status()
    {
        /** @var SmsNotificationLog $sms */
        $sms = factory(SmsNotificationLog::class)->create([
            'credential_id' => $this->credential->id
        ]);
        $response = $this->get(route('api.sms.status', ['uuid' => $sms->id]), $this->headers);
        $response->assertStatus(200);
        $response->assertJson([
            'sms_uuid' => $sms->id,
            'status' => $sms->status,
        ]);
    }

    public function test_it_trows_404_on_unknown_id()
    {
        $response = $this->get(route('api.sms.status', ['uuid' => 'non-existing_UUID']), $this->headers);
        $response->assertStatus(404);
    }

    public function test_it_trows_403_if_an_invalid_or_no_api_key_is_specified()
    {
        $response = $this->get(route('api.sms'));
        $response->assertStatus(403);
    }

    public function test_it_cant_send_an_sms_without_a_phone_number()
    {
        $sms = $this->validSms();
        Arr::forget($sms, 'to');
        $response = $this->post(route('api.sms.now'), $sms, $this->headers);
        $response->assertStatus(422);
    }

    public function test_it_cant_send_an_sms_without_text()
    {
        $sms = $this->validSms();
        Arr::forget($sms, 'text');
        $response = $this->post(route('api.sms.now'), $sms, $this->headers);
        $response->assertStatus(422);
    }

    public function test_it_can_queue_an_sms()
    {
        $sms = $this->validSms();
        Queue::fake();
        $response = $this->post(route('api.sms.queue'), $sms, $this->headers);
        Queue::assertPushed(SendSmsJob::class, 1);
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'queued');
    }

    public function test_it_can_send_an_sms()
    {
        Sms::fake();
        $sms = $this->validSms();
        $response = $this->post(route('api.sms.now'), $sms, $this->headers);
        Sms::assertSent($sms['text'], count(json_decode($sms['to'])));
        $response->assertStatus(200);
        $response->assertJsonPath('status', 'sent');
    }

}
